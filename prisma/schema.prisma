// prisma/schema.prisma
// DB schema for Jeju Events & Support Programs portal

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("event")
}

model SupportProgram {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  targetGroup String?
  link        String?
  startDate   DateTime?
  endDate     DateTime?
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("support_program")
}

model AdminUser {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String   // hashed
  createdAt DateTime @default(now())
  @@map("admin_user")
}

// 추가된 모델: 외부 API 전시 정보 저장
model ExternalExhibition {
  id           Int      @id @default(autoincrement())
  seq          Int      @unique // API의 seq를 고유 식별자로 사용
  title        String
  category     String?
  categoryName String?
  cover        String?
  coverThumb   String?
  startDate    DateTime? @map("start_date") // Prisma는 DateTime으로 관리, DB 컬럼명은 start_date
  endDate      DateTime? @map("end_date")   // Prisma는 DateTime으로 관리, DB 컬럼명은 end_date
  hour         String?   // 시간 정보는 문자열로 유지
  pay          String?
  locs         String?   // API 필드명 유지
  locNames     String?
  owner        String?
  tel          String?
  stat         String?
  divName      String?
  intro        String?   @db.Text // 긴 소개 내용을 위해 Text 타입 사용
  approved     Boolean   @default(false) // 관리자 승인 여부
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  @@map("external_exhibition")
}

model WelfareService {
  id           Int      @id @default(autoincrement())
  seq          Int      @unique
  name         String
  allLoc       Boolean  @map("all_loc")
  jejuLoc      Boolean  @map("jeju_loc")
  seogwipoLoc  Boolean  @map("seogwipo_loc")
  support      String?  @db.Text
  contents     String?  @db.Text
  application  String?  @db.Text
  approved     Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt   @map("updated_at")
  @@map("welfare_service")
}

model Festival {
  id           Int      @id @default(autoincrement())
  seq          Int      @unique
  no           Int?
  title        String
  writeDate    DateTime @map("write_date")
  writer       String?
  url          String?
  contents     String?  @db.Text
  createdAt    DateTime @default(now())     @map("created_at")
  updatedAt    DateTime @updatedAt         @map("updated_at")
  @@map("festival")
}

model JunoldaEvent {
  id           Int      @id @default(autoincrement())
  seq          Int      @unique
  no           Int?
  title        String
  writeDate    DateTime? @map("write_date")
  writer       String?
  url          String?
  contents     String?   @db.Text
  createdAt    DateTime  @default(now())    @map("created_at")
  updatedAt    DateTime  @updatedAt         @map("updated_at")
  approved     Boolean   @default(false)
  @@map("junolda_event")
}

model JejuEvent {
  id           Int      @id @default(autoincrement())
  seq          Int      @unique
  no           Int?
  title        String
  writeDate    DateTime @map("write_date")
  writer       String?
  url          String?
  contents     String?  @db.Text
  approved     Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  @@map("jeju_event")
}
