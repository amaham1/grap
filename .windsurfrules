-가능하면 코드 추상화와 모듈화를 해주세요.
-vue 3을 사용해주세요.
-기능별 컴포너트를 구분하고 폴더 구분도 해주세요.
-Composition API 스타일로 코드 작성하세요.
-기능이 비슷한 것은 모듈화하여 1개의 함수로 여러 곳에서 사용하도록 해주세요.
-TypeScript 사용 금지.
-광범위하게 사용되는 기능이나 변수나 이런것들의 이름은 명확하게 지어주세요.
-현재 구현되어 있는 기능을 수정이나 코드 생성을 위해 없어져야하는 것이 아니면 없애지마세요.
-css이나 스타일도 처음 구현된 스타일을 변경하지말고 추가/수정만 해주세요.
-기존 코드를 제거할 때는 다시 한번 확인해서 진짜 필요없는지 확인하고 제거가 필요하다면 반드시 주석으로 남겨주세요.

#데이터가 있는 서버에서 api통신으로 데이터를 가져온다는 상황으로 코드 작성해주세요.

General Code Style & Formatting
- Use functional and declarative programming patterns
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Follow Expo's official documentation for setting up and configuring projects.

# General Code Style & Formatting
- Follow the Airbnb Style Guide for code formatting.
- Prefer named exports for components.

# Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

# Styling & UI
- Use Expo's built-in components for common UI patterns and layouts.
- Implement responsive design with Flexbox and useWindowDimensions.
- Use styled-components or Tailwind CSS for styling.
- Implement dark mode support using Expo's useColorScheme.
- Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.

# Syntax & Formatting
- Use the function keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use Prettier for consistent code formatting.